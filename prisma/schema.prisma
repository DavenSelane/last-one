generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  password           String
  role               UserRole?
  createdAt          DateTime        @default(now())
  image              String?
  bio                String?
  phone              String?
  gradeId            Int?
  classId            Int?
  parentId           Int?
  firstName          String
  lastName           String
  announcements      Announcement[]
  createdAssignments Assignment[]    @relation("AssignmentCreator")
  calendarEvents     CalendarEvent[]
  supervisedClasses  Class[]         @relation("ClassSupervisor")
  Content            Content[]
  tutorLessons       Lesson[]        @relation("TutorLessons")
  studentResults     Result[]
  class              Class?          @relation(fields: [classId], references: [id])
  grade              Grade?          @relation(fields: [gradeId], references: [id])
  parent             User?           @relation("ParentChildren", fields: [parentId], references: [id])
  children           User[]          @relation("ParentChildren")
  subjectsEnrolled   Subject[]       @relation("SubjectStudents")
  subjectsTaught     Subject[]       @relation("SubjectTutors")

  @@index([role])
  @@index([classId])
  @@index([gradeId])
}

model Grade {
  id      Int     @id @default(autoincrement())
  name    String
  classes Class[]
  users   User[]
}

model Class {
  id           Int      @id @default(autoincrement())
  name         String
  gradeId      Int
  supervisorId Int
  grade        Grade    @relation(fields: [gradeId], references: [id])
  supervisor   User     @relation("ClassSupervisor", fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     User[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  assignments Assignment[]
  contents    Content[]
  lessons     Lesson[]
  students    User[]       @relation("SubjectStudents")
  tutors      User[]       @relation("SubjectTutors")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  topic       String
  subjectId   Int
  classId     Int
  tutorId     Int
  assignments Assignment[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  tutor       User         @relation("TutorLessons", fields: [tutorId], references: [id])

  @@index([subjectId])
  @@index([classId])
  @@index([tutorId])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  dueDate     DateTime
  pdfUrl      String?
  solutionUrl String?
  imgUrl      String?
  description String?
  questions   String?
  maxScore    Float    @default(100)
  lessonId    Int?
  subjectId   Int?
  createdById Int?
  createdAt   DateTime @default(now())
  createdBy   User?    @relation("AssignmentCreator", fields: [createdById], references: [id])
  Lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  subject     Subject? @relation(fields: [subjectId], references: [id])
  results     Result[]

  @@index([lessonId])
  @@index([subjectId])
  @@index([dueDate])
  @@index([createdById])
}

model Result {
  id            Int         @id @default(autoincrement())
  score         Float       @default(0)
  studentId     Int
  assignmentId  Int?
  answers       String?
  feedback      String?
  submittedAt   DateTime    @default(now())
  gradedAt      DateTime?
  submissionUrl String?
  status        String      @default("submitted")
  assignment    Assignment? @relation(fields: [assignmentId], references: [id])
  student       User        @relation(fields: [studentId], references: [id])
}

model Content {
  id            Int         @id @default(autoincrement())
  title         String
  type          ContentType
  subjectId     Int
  grades        Int
  description   String
  body          String?
  videoUrl      String?
  documentUrl   String?
  difficulty    Difficulty  @default(INTERMEDIATE)
  tags          String[]    @default([])
  allowComments Boolean     @default(true)
  featured      Boolean     @default(false)
  imageUrl      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  authorId      Int?
  author        User?       @relation(fields: [authorId], references: [id])
  subject       Subject     @relation(fields: [subjectId], references: [id])

  @@index([subjectId])
  @@index([grades])
  @@index([type])
  @@index([createdAt])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  authorId    Int
  classId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
}

model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  userId      Int
  allDay      Boolean  @default(false)
  color       String   @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

enum ContentType {
  VIDEO
  DOCUMENT
  QUIZ
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  ADMIN
  TUTOR
  PARENT
  STUDENT
}
